buildscript {
    ext {
        kotlin_version = '1.3.71'
        bintray_version = '1.8.1'
    }
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintray_version"
        classpath "com.github.jengelman.gradle.plugins:shadow:5.1.0"
    }
}

plugins {
    id "io.gitlab.arturbosch.detekt" version "1.9.0"
}

repositories {
    jcenter()
}

ext {
    lib_version = System.getenv("RELEASE_TAG") ?: System.getenv("GITHUB_SHA") ?: System.getenv("VERSION") ?: "undefined"
    lib_group = 'com.gitlab.kordlib.kordx'
    coroutines_version = '1.3.7'
    koin_version = '2.1.5'

    junit_version = '5.6.0'
    mockk_version = '1.10.0'
    kotlin_logging_version = '1.6.26'
    log4j_version = '1.7.26'
}

group lib_group
version lib_version

subprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'kotlinx-serialization'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'kotlin-kapt'
    apply plugin: 'io.gitlab.arturbosch.detekt'

    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://kotlin.bintray.com/kotlinx" }
        maven { url "https://dl.bintray.com/kordlib/Kord" }
    }

    dependencies {
        api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
        api "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
        api "io.github.microutils:kotlin-logging:$kotlin_logging_version"
        testImplementation "io.mockk:mockk-dsl-jvm:$mockk_version"
        testImplementation "io.mockk:mockk:$mockk_version"
        testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
        testImplementation "org.jetbrains.kotlin:kotlin-test-junit5:$kotlin_version"
        testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
        testRuntimeOnly "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
        testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_version"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"
        testRuntimeOnly "org.slf4j:slf4j-simple:$log4j_version"
        implementation "com.squareup:kotlinpoet:1.4.1"
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
            freeCompilerArgs = [
                    "-XXLanguage:+InlineClasses",
                    "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi",
                    "-Xopt-in=kotlin.Experimental"
            ]
        }
    }

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
            freeCompilerArgs = [
                    "-XXLanguage:+InlineClasses",
                    "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi",
                    "-Xopt-in=kotlin.Experimental"
            ]
        }
    }

    test {
        useJUnitPlatform {
            includeEngines 'junit-jupiter'
        }
    }

    task sourcesJar(type: Jar) {
        archiveClassifier.set 'sources'
        from sourceSets.main.allSource
    }

    archivesBaseName = project.name

    publishing {
        publications {
            Commands(MavenPublication) {
                from components.kotlin
                groupId lib_group
                artifactId archivesBaseName
                version lib_version

                artifact sourcesJar
                pom.withXml {
                    def root = asNode()

                    root.dependencies.removeAll { dep ->
                        dep.scope == "test"
                    }
                }
            }
        }
    }

    bintray {
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')
        publications = ['Commands']
        publish = true
        pkg {
            repo = 'Kord'
            name = 'kordx.commands'
            userOrg = 'kordlib'
            licenses = ['MIT']
            vcsUrl = 'https://gitlab.com/kordlib/kordx.commands.git'
            websiteUrl = 'https://gitlab.com/kordlib/kordx.commands'
            issueTrackerUrl = 'https://gitlab.com/kordlib/kordx.commands/issues'

            version {
                name = lib_version
                desc = "Command library for Kotlin"
                released = new Date()
                vcsTag = lib_version
            }
        }
    }

}
